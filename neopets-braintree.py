from collections import Counter
from random import randrange
import math

allq = [(100, 10),
	(100, 20),
	(100, 25),
	(100, 2),
	(100, 4),
	(100, 50),
	(100, 5),
	(105, 15),
	(105, 21),
	(105, 35),
	(105, 3),
	(105, 5),
	(105, 7),
	(150, 10),
	(150, 15),
	(150, 25),
	(150, 2),
	(150, 30),
	(150, 3),
	(150, 50),
	(150, 5),
	(150, 6),
	(150, 75),
	(155, 31),
	(155, 5),
	(200, 10),
	(200, 20),
	(200, 25),
	(200, 40),
	(200, 4),
	(200, 50),
	(200, 5),
	(200, 8),
	(205, 41),
	(205, 5),
	(250, 10),
	(250, 25),
	(255, 15),
	(255, 17),
	(255, 3),
	(255, 51),
	(255, 5),
	(255, 85),
	(300, 10),
	(300, 12),
	(300, 15),
	(300, 20),
	(300, 25),
	(300, 30),
	(300, 4),
	(300, 50),
	(300, 5),
	(300, 60),
	(300, 6),
	(300, 75),
	(305, 5),
	(305, 61),
	(350, 10),
	(350, 14),
	(350, 25),
	(350, 35),
	(350, 50),
	(350, 5),
	(350, 70),
	(350, 7),
	(355, 5),
	(355, 71),
	(400, 10),
	(400, 16),
	(400, 25),
	(400, 40),
	(400, 5),
	(400, 80),
	(405, 15),
	(405, 27),
	(405, 45),
	(405, 5),
	(405, 81),
	(405, 9),
	(450, 10),
	(450, 15),
	(450, 18),
	(450, 25),
	(450, 30),
	(450, 45),
	(450, 50),
	(450, 5),
	(450, 6),
	(450, 75),
	(450, 90),
	(450, 9),
	(455, 13),
	(455, 35),
	(455, 5),
	(455, 65),
	(455, 7),
	(455, 91),
	(500, 10),
	(500, 20),
	(500, 25),
	(500, 50),
	(550, 10),
	(550, 11),
	(550, 22),
	(550, 25),
	(550, 50),
	(550, 55),
	(555, 15),
	(555, 37),
	(600, 10),
	(600, 12),
	(600, 15),
	(600, 20),
	(600, 24),
	(600, 25),
	(600, 30),
	(600, 40),
	(600, 50),
	(600, 60),
	(600, 75),
	(600, 8),
	(605, 11),
	(605, 55),
	(650, 10),
	(650, 13),
	(650, 25),
	(650, 26),
	(650, 50),
	(650, 65),
	(700, 10),
	(700, 14),
	(700, 20),
	(700, 25),
	(700, 28),
	(700, 35),
	(700, 50),
	(700, 70),
	(705, 15),
	(705, 47),
	(750, 10),
	(750, 15),
	(750, 25),
	(750, 30),
	(750, 50),
	(750, 75),
	(800, 10),
	(800, 16),
	(800, 20),
	(800, 25),
	(800, 32),
	(800, 40),
	(800, 50),
	(800, 80),
	(805, 23),
	(805, 35),
	(850, 10),
	(850, 17),
	(850, 25),
	(850, 34),
	(850, 50),
	(850, 85),
	(855, 15),
	(855, 19),
	(855, 45),
	(855, 57),
	(855, 95),
	(855, 9),
	(900, 10),
	(900, 12),
	(900, 15),
	(900, 18),
	(900, 20),
	(900, 25),
	(900, 30),
	(900, 36),
	(900, 45),
	(900, 50),
	(900, 60),
	(900, 75),
	(900, 90),
	(950, 10),
	(950, 19),
	(950, 25),
	(950, 38),
	(950, 50),
	(950, 95)]

# results = {} # correct answers to set
results = Counter()
threshold = 2

roundQuestions = []

def isInt(s):
	try:
		int(s)
		return True
	except ValueError:
		return False

def popRandom(l):
	return l.pop(randrange(len(l)))

def doRound(added):
	workingSet = list(roundQuestions)
	threshold = int(math.sqrt(len(roundQuestions)))
	while len(workingSet) > 0:
		q = popRandom(workingSet)
		a = raw_input("{:3d} / {:2d} = ".format(*q))
		if isInt(a) and int(a) == q[0] / q[1]:
			results[q] += 1
			if results[q] > (threshold if q != added else 2 * threshold):
				pass
			else:
				workingSet.append(q)
		else:
			print "         = " + str(q[0] / q[1])
			workingSet.append(q)
			results[q] = 0
	results.clear()
	# while threshold not in results or len(results[threshold]) < len(roundQuestions):

while len(allq) > 0:
	q = popRandom(allq)
	print "Adding {:3d} / {:2d} = {}".format(q[0], q[1], q[0] / q[1])
	roundQuestions.append(q)
	print "Round {:d}".format(len(roundQuestions))
	doRound(q)